/**
 *  Control4 Send Command
 *
 *  Copyright 2015 Dave Lin
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Control4 Send Command",
    namespace: "dclindesign",
    author: "Dave Lin",
    description: "Control4 Send Command",
    category: "My Apps",
	iconUrl: "https://s3.amazonaws.com/smartapp-icons/Meta/light_outlet.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Meta/light_outlet@2x.png"
)
preferences {
section("Contact Sensor") {
		input "contact1", "capability.contactSensor", title: "Contact Sensor"
	}
 section("Server address and command"){
	input "server", "text", title: "Server IP", description: "Your Control4 Server IP", required: true
	input "command", "text", title: "Command", description: "Your Control4 Command", required: true
}
}

def installed() {
	subscribeToEvents()
    subscribe(contact1, "contact", contactHandler)
    subscribe(location, changedLocationMode)
	subscribe(app, appTouch)
}

def updated() {
	unsubscribe()
	subscribeToEvents()
    subscribe(contact1, "contact", contactHandler)
    subscribe(location, changedLocationMode)
	subscribe(app, appTouch)
}

def subscribeToEvents() {
    subscribe(location, null, lanResponseHandler, [filterEvents:false])
}

def onHandler(evt) {
    sendHttp()
}

def changedLocationMode(evt) {
	log.debug "changedLocationMode: $evt"
	sendHttp()
}

def appTouch(evt) {
	log.debug "appTouch: $evt"
	sendHttp()
}

def lanResponseHandler(evt) {
	log.debug "In response handler"
	log.debug "I got back ${evt.description}"
}

def sendHttp() {
def ip = "$server:8080"
sendHubCommand(new physicalgraph.device.HubAction("GET /$command HTTP/1.1\r\nHOST: $ip\r\n\r\n", physicalgraph.device.Protocol.LAN))
}

def contactHandler(evt) {
	log.debug "$evt.value"
	if (evt.value == "open") {
        sendHttp()
	} else if (evt.value == "closed") {
        sendHttp()
	}
}
